* v0.5.0
- change internal DPI from 72.27 to 72
- extend viewport by FileTypeKind field for TextExtent information,
  required for correct text placement on Cairo
  - now uses the correct file type for the Cairo surface needed to
    compute the text extents
- ~strWidth / strHeight~ now allow to set the text that will be
  used, not only the ~getStrWidth/Height~ procs
- change default letter to check string height / width based on to ~M~
- add (currently unused) ~includeBearing~ field to ~Coord1D~ for
  string height calculation
- significantly improve placement & height calc of multi line text.
  -> This is now consistent between `initMultilineText` and `getStrHeight`
  with multiple lines.
- fix distance of tick labels for x and y axes
  -> Now they really have the same distance from the top of the
  character (x axis) and the right side of the character (y axis)!
- add ~QuietTikZ~ bool define CT option (~-d:QuietTikZ=true~) to disable
  the shell output when using the TikZ backend to compile TeX to PDF.
- massive TikZ backend improvements:
  - disable bounds around text nodes to get accurate placement of
    where the coordinates say the text should be placed
  - make the output PDF have the correct size in pixels as demanded
    from the ~ggsave~ call (i.e. the BImage size) by adding a
    rectangle of exactly ~(width bp , height bp)~ points, using the
    TeX unit ~bp~ which matches 72 DPI.
  - replace relative coordinates used on the TikZ backend by absolute
    coordinates in ~bp~ (i.e. pixels). Makes for much easier reasoning
    about the coordinates.
  - fix ~TextExtent~ logic for TikZ. We now talk to a TeX compiler
    running in the background about sizes for text pieces.
* v0.4.3
- add ~bkDummy~ backend enum field to differentiate between none given
  and dummy selected
* v0.4.2
- update LatexDSL package (PR #44 and further in #45)
- handle tilde =~= in given filenames to expand to home directory
- allow alpha channel in raster plots (for Cairo backend for now)  
* v0.4.1
- adds two CT variables that can be adjusted (~{.intdefine.}~)
  - ~TickPrecisionCutoff~: decimal of the ~10^((-)TickPrecisionCutoff)~ value within
    which the tick labels are printed as decimal values and outside in exp notation
  - ~TickPrecision~: the number of digits used as precision as an argument to
    ~formatBiggestFloat~.
- handle monospace font family in TikZ backend via ~\texttt~
- change backends to default to Cairo + TikZ activated
- add ~embedAsRelative~, ~toRelative~ to convert Viewport to relative
  Allows to embed a viewport using relative size, which makes it easier
  to merge a final plot into a viewport of different aspect ratio and
  size than expected, as the relative size will remain and not the
  absolute ones (if any).
- fix a bug of drawing error bars in ~T~ style, which did not take
  data scale correctly into account resulting in too large or too
  small "side" bars.
- add ~+~ and ~-~ between ~Coord1D~ and ~Quantity~ for the same kind
* v0.4.0
- make backends generic objects to allow to select different backends
  at compile time and to simplify code
- avoid checking TeX code in TikZ backend at CT, as it doesn't change
- place TikZ generated PDFs in location desired by user, not in current
  working directory
- add custom ~clone~ for ~Viewport~
* v0.3.14
- export =xaxis= and =yaxis=
* v0.3.13
- add =clone= operation for =GraphObject= type
- fix example code in main source file  
* v0.3.12
- add Github Actions CI, automatic documentation generation
- clean up code to output less hints / warnings due to style and
  unused variables
- change calculation of text width / height by using advance &
  bearing to fix distances computed if spaces (leading / trailing) are
  involved
- fix placement of 'T' error bar lines in x axis if =xMargin= is used
  in ggplotnim
- add =goManyPoints= object, which can be used to reduce memory
  consumption and increase performance when plotting many points of
  the same style.
* v0.3.11
- small release that disables the status message when successfully
  writing a PNG on the Cairo backend
* v0.3.10
- further fixes placement of tick labels to make sure x and y axes are
  at the same distance from the ticks
- hotfix for a regression in =v0.3.9=, which broke manual line breaks
  in TikZ backend annotations
* v0.3.9
- add a =bkNone= backend kind to detect if no backend was set
  explicitly
- improve alignment of text on the TikZ backend. In particular the
  text width is now more correct.  
* v0.3.8
- adds more shapes to draw points with. The available shapes are now:
  - circle
  - cross
  - triangle
  - rhombus
  - rectangle
  - rotated cross
  - upside down triangle
  - empty circle
  - empty rectangle
  - empty rhombus
* v0.3.7
- reduces the output size of plots on the TikZ backend, by reducing
  printed precision of positions and avoiding multiple outputs of the
  same color
* v0.3.6
- add options for TikZ backend to embed the plot in a full figure
  environment with a given caption and label
* v0.3.5
- fix =draw= procedure to bring it in line with current backend API
* v0.3.4
- TikZ fixes for text placement and multi line text
- merge determination of backend into single =toBackend= procedure
- export =parseFilename=, which returns =FileTypeKind= from filename
* v0.3.3
- fix determination of platform in =backends.nim= for OSX
- fail at CT if a bad platform is encountered for TikZ + PDF generation  
* v0.3.2
- have =initBImage= take a default =TeXOptions()= argument
- fix dummy backend to be inline with normal API  
* v0.3.1
- update LatexDSL dependency to version =v0.1.5=
* v0.3.0
- implements the TikZ backend for native LaTeX plots. Either
  generation of TeX code using TikZ or direct compilation by calling
  =xelatex/pdflatex=
  
* v0.2.12
- fix height used in =getStrHeight= to determine height of multiple
  lines
- change string width / height computations to use text extents
  =width=, =height= fields instead of advance and bearing  
* v0.2.11
- fix downstream =ggplotnim= issue #94:
  https://github.com/Vindaar/ggplotnim/issues/94
* v0.2.10
- change default tick label margin to be based on font height
- fix margin handling in layout to be based on relative sizes of the
  *current* viewport instead of the parent viewport
* v0.2.9
- add "Secondary" suffix to the names of tick labels of secondary axes
* v0.2.8
- add rotate/alignment argument to another =tickLabels= overload
* v0.2.7
- fix the spacing for multi line text. The reference height was wrong.
* v0.2.6
- allow assignment of axis in =initCoord1D= proc / template using it,
  use that in =initCoord= proc / template for =ukData=
- handle negative width / height in =drawRaster=
* v0.2.5 
- add support for raster objects, i.e. bitmap based rectangles with
  NxM colored blocks
* v0.2.4
- add the option to provide tick labels via a callback, PR #18 by @cooldome
* v0.2.3
- make tick label positions relative. For plots that are embedded this
  is important to keep the labels where they belong.
* v0.2.2
- fixes arithmetic for coordinates involving =ukData= kinds
- fix string representation for =goComposite=

* v0.2.1
Hotfix release, which adds the missing =PContext= object for the dummy
backend, which is used to test on travis in ggplotnim.
* v0.2.0
- fix remaining places, which are supposed to use =pointWidth/Height=
- make =ignoreOverflow= work for =layout= (was previously ignored),
  which allows for total heights / widhts larger than the
  viewport. Better to have overflowing viewports than crash if
  desired!
- simplify =toAbsImage= implementation, calls =to= for each =Coord=
  field instead now.
- deprecate =to= for =Coord=. Use =to= for =Coord1D= instead on each
  field!
- =to= now return early if input already has output type
- =BImage= now has a =PContext= field. Instead of creating a context
  for each field, we now keep a global one, whose state we save and
  revert. 
- =Viewport= and =GraphObject= are now =ref objects= to avoid costly
  copies, if we have large objects in =ggplotnim=. Reduces memory
  footprint for plots with many elements significantly (1 Mio. point
  scatter plot before 8.5 GB (!!!), now *cough* only 1.7 GB). 

* v0.1.17
Hotfix release for =v0.1.16= due to missing field.
- add =alignKind= field to =Font=

* v0.1.16
- =layout= now has a =ignoreOverflow= argument, which if true will
  allow overflowing layouts, i.e. layouts which exceed the size of the
  viewport
- =Style= now has a =font= field

* v0.1.15
- fix =pointWidth= and =pointHeight= to return real width and height
  of viewport
- add arithmetic procs for =Quantity=.
  These respect absolute units and try to remain them. If both are
  absolute, result is absolute. If only one is absolute the result
  will also be absolute. Only relative returned if both are relative.
- fix arithmetic for =Coord1D= to effectively follow the same rules as
  the ones for =Quantity= mentioned above
- fixes many wrong scales used for conversions / embeddings
  -> This and the above means adding an absolute distance to some
  quantity or coordinate will now result in that distance on the final
  plot, no matter how embedded the current viewport is!
- add =drawBoundary= proc to highlight different viewports (including
  writing its name / a number into the center with different colors)
- =initLine= is now public
- tick label related procs now allow custom margin to be set (by
  default it's 0.4 cm for y labels / ticks and 0.5 cm for x labels / ticks)
- tick calculations now fully respect =boundScale= if given (that is
  the resulting's objects (and view's) data scale is =boundScale=
  instead of the new scale
- =layout= is significantly improved. It allows absolute units and
  does not convert these to relative. However, margins are not allowed
  (have no effect) at the moment. But they were broken.
- add support for gradients. So far only on rectangles, but that's an
  easy fix.









